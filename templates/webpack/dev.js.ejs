var path = require('path');
var webpack = require('webpack');
var HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
    context: path.resolve(__dirname, '../src'),

    <% if (multiple) { %>
        entry: {
            app: [
                'webpack-dev-server/client?http://localhost:3000',
                //为webpack-dev-server的环境打包好运行代码
                // 然后连接到指定服务器域名与端口

                'webpack/hot/only-dev-server',
                // 为热替换（HMR）打包好运行代码
                // only- 意味着只有成功更新运行代码才会执行热替换（HMR）

                './js/app.<%- extname %>'
            ],
            info: [
                'webpack-dev-server/client?http://localhost:3000',
                //为webpack-dev-server的环境打包好运行代码
                // 然后连接到指定服务器域名与端口

                'webpack/hot/only-dev-server',
                // 为热替换（HMR）打包好运行代码
                // only- 意味着只有成功更新运行代码才会执行热替换（HMR）

                './js/info.<%- extname %>'
            ]
        },
    <% } else {%>
        entry: [
            'webpack-dev-server/client?http://localhost:3000',
            //为webpack-dev-server的环境打包好运行代码
            // 然后连接到指定服务器域名与端口

            'webpack/hot/only-dev-server',
            // 为热替换（HMR）打包好运行代码
            // only- 意味着只有成功更新运行代码才会执行热替换（HMR）

            './js/app.<%- extname %>'
        ],
    <% } %>
    
    
    output: {
        path: path.resolve(__dirname, '../dist/'),
        filename: 'js/[name].js',
        publicPath: '/'
    },

    module: {
        rules: [
            {
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/
            },
            <% if (jsLoader == 'coffeescript') {%>
                {
                    test: /\.coffee$/,
                    exclude: /node_modules/,
                    use: [
                        {
                            loader: 'coffee-loader',
                            options: { sourceMap: true }
                        }
                    ]
                },
            <% } else if (jsLoader == 'typescript') { %>
                {
                    test: /\.coffee$/,
                    exclude: /node_modules/,
                    use: [
                        {
                            loader: 'coffee-loader',
                            options: { sourceMap: true }
                        }
                    ]
                },
            <% } %>
            
            {
                test: /\.css$/,
                use: ["style-loader", "css-loader"]
            },
            <% if (cssLoader == 'less') { %>
            {
                test: /\.less$/,
                use: ["style-loader", "css-loader", "less-loader"],
            }, 
            <% } else if (cssLoader == 'sass') {%>
                {
                    test: /\.scss$/,
                    use: ["style-loader", "css-loader", "sass-loader"],
                }, 
            <% } %>
            
            {
                test: /\.(png|jpg|gif)$/,
                loader: 'url-loader?limit=8192&name=images/[hash:8].[name].[ext]'
            },
            <% if (fileLoader) {%>
            {
                test: /\.(svg|ttf|eot|woff|woff2)$/,
                loader: 'file-loader?name=fonts/[hash:8].[name].[ext]'
            }
            <% } %>
        ]
    },

    devtool: 'source-map',

    resolve: {
        extensions: ['.js', '.json'<% if (extname!= 'js'){%> ,'.<%= extname %>'<%}%>]
    },

    devServer: {
        contentBase: path.resolve(__dirname,'../dist'),

        hot: true,
        // 开启服务器的模块热替换（HMR）

        host: 'localhost',

        port: 3000,

        inline: true,

        publicPath: '/',
        // 和上文output的"publicPath"值保持一致

        historyApiFallback: true,
    },

    plugins: [
        new webpack.HotModuleReplacementPlugin(),
         // 开启全局的模块热替换（HMR）

        new webpack.NamedModulesPlugin(),
        // 当模块热替换（HMR）时在浏览器控制台输出对用户更友好的模块名字信息

        <% if (multiple) {%>
        new HtmlWebpackPlugin({
            filename: 'index.html',
            template: 'html-withimg-loader!'+path.resolve(__dirname, '../src/index.html'),
            chunks: ['app']
        }),

        new HtmlWebpackPlugin({
            filename: 'info.html',
            template: 'html-withimg-loader!'+path.resolve(__dirname, '../src/info.html'),
            chunks: ['info']
        })
        <% }  else {%>
        new HtmlWebpackPlugin({
            filename: 'index.html',
            template: 'html-withimg-loader!'+path.resolve(__dirname, '../src/index.html'),
        }),
        <% } %>
    ]

}