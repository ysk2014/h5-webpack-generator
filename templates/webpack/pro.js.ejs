var path = require('path');
var webpack =require('webpack');
var merge = require('webpack-merge');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var CleanWebpackPlugin = require('clean-webpack-plugin');
var autoprefixer = require('autoprefixer');

var baseWebpackConfig = require('./base');

<%if (cache) {%>
baseWebpackConfig.entry['vendor'] = ['./js/libs/utils.js'];
<%}%>

baseWebpackConfig.module.rules[1].use = ExtractTextPlugin.extract({
    fallback: "style-loader",
    use: [{
        loader: 'css-loader',
        options: {
            minimize: true //css压缩
        }
    }, 'postcss-loader', 'less-loader'],
    publicPath: '/css'
});

<% if (multiple) {%>
var multipleHtml = [{
    filename: "index.html",
    path: "../src/index.html",
    chunks: <% if (cache) {%>['app', 'vendor', 'manifest']<%} else {%>['app']<%}%>
}, {
    filename: "info.html",
    path: "../src/info.html",
    chunks:<% if (cache) {%>['info', 'vendor', 'manifest']<%} else {%>['info']<%}%>
}];
<% } else {%>
var multipleHtml = [{
    filename: "index.html",
    path: "../src/index.html",
}]
<% } %>

multipleHtml.forEach(function(item) {
    baseWebpackConfig.plugins.push(new HtmlWebpackPlugin({
        filename: item.filename,
        template: 'html-withimg-loader!'+path.resolve(__dirname, item.path),
        chunks: item.chunks
    }));
});

webpackConfig = merge(baseWebpackConfig, {
    output: {
        path: path.resolve(__dirname, '../dist/'),
        filename: 'js/[name].[chunkHash].js',
        publicPath: '/',
        chunkFilename: "js/[name].[chunkHash].js",
    },
    devtool: false,

    plugins: [
        new CleanWebpackPlugin(['dist'], {
            root: path.resolve(__dirname, '../')
        }),

        new webpack.NamedModulesPlugin(),

        <% if (cache) {%>
        new webpack.optimize.CommonsChunkPlugin({
            name: 'manifest',
            minChunks: Infinity, // 随着 入口chunk 越来越多，这个配置保证没其它的模块会打包进 公共chunk
        }),
        <% } %>

        new webpack.optimize.UglifyJsPlugin({
            compress: {
                warnings: false,
                drop_console: false,
            },
            sourceMap: true
        }),

        <% if (multiple) {%>
        new ExtractTextPlugin('css/[name].[contenthash].min.css'),
        <% } else { %>
        new ExtractTextPlugin('css/all.[contenthash].min.css'),
        <% } %>

        // 编译时(compile time)插件
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': '"production"',
        }),
    ]
});


if (process.env.npm_config_report) {
    var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin
    webpackConfig.plugins.push(new BundleAnalyzerPlugin())
}

module.exports = webpackConfig;
