const path = require("path");
const merge = require("webpack-merge");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const OptimizeCSSAssetsPlugin = require("optimize-css-assets-webpack-plugin");
const UglifyJsPlugin = require("uglifyjs-webpack-plugin");
const CleanWebpackPlugin = require("clean-webpack-plugin");

let baseWebpackConfig = require('./base');

let multipleHtml = [{
    filename: "index.html",
    path: "../src/index.html"
}]

multipleHtml.forEach(function(item) {
    baseWebpackConfig.plugins.push(new HtmlWebpackPlugin({
        filename: item.filename,
        template: 'inline-html-withimg-loader!'+path.resolve(__dirname, item.path)
    }));
});

webpackConfig = merge(baseWebpackConfig, {
    output: {
        path: path.resolve(__dirname, '../dist/'),
        filename: 'js/[name].[chunkHash].js',
        publicPath: '/',
        chunkFilename: "js/[name].[chunkHash].js",
    },
    devtool: false,

    optimization: {
        runtimeChunk: "single",

        minimizer: [
            new UglifyJsPlugin({
                cache: true,
                parallel: true,
                sourceMap: true // set to true if you want JS source maps
            }),
            new OptimizeCSSAssetsPlugin({})
        ],

        splitChunks: {
            name: true,
            chunks: "async",
            minChunks: 2,

            cacheGroups: {
                vender: {
                    name: "vender",
                    test: /[\\/]node_modules[\\/]/,
                    chunks: "all",
                    priority: 10
                }
            }
        }
    },

    plugins: [
        new CleanWebpackPlugin(["dist"], {
            root: path.resolve(__dirname, "../")
        }),
        new MiniCssExtractPlugin({
            filename: "css/all.[contenthash].min.css"
        })
    ]
});


if (process.env.npm_config_report) {
    var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin
    webpackConfig.plugins.push(new BundleAnalyzerPlugin())
}

module.exports = webpackConfig;
