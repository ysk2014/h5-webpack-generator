var path = require('path');
var webpack =require('webpack');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var CleanWebpackPlugin = require('clean-webpack-plugin');
var InlineManifestWebpackPlugin = require('inline-manifest-webpack-plugin');

module.exports = {
    context: path.resolve(__dirname, '../src'),

    entry: {
        app: './js/app.<%- extname %>',
        <% if (multiple) { %>
        info: './js/info.<%- extname %>',
        <% } %>
        <% if (cache) {%>
        vendor: ['./js/libs/utils.<%- extname %>']
        <% } %>
    },
    
    output: {
        path: path.resolve(__dirname, '../dist/'),
        filename: 'js/[name].[chunkHash].js',
        publicPath: '/',
        chunkFilename: "js/[name].[chunkHash].js",
    },

    module: {
        rules: [
            {
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/
            },
            <% if (jsLoader == 'coffeescript') {%>
            {
                test: /\.coffee$/,
                exclude: /node_modules/,
                use: [
                    {
                        loader: 'coffee-loader',
                        options: { sourceMap: true }
                    }
                ]
            },
            <% } else if (jsLoader == 'typescript') { %>
            {
                test: /\.coffee$/,
                exclude: /node_modules/,
                use: [
                    {
                        loader: 'coffee-loader',
                        options: { sourceMap: true }
                    }
                ]
            },
            <% } %>
            
            {
                test: /\.css$/,
                use: ExtractTextPlugin.extract({
                    fallback: "style-loader",
                    use: ['css-loader'],
                    publicPath: '/css'
                })
            },
            <% if (cssLoader == 'less') { %>
            {
                test: /\.less$/,
                use: ExtractTextPlugin.extract({
                    fallback: "style-loader",
                    use: ['css-loader','less-loader'],
                    publicPath: '/css'
                })
            }, 
            <% } else if (cssLoader == 'sass') {%>
            {
                test: /\.scss$/,
                use: ExtractTextPlugin.extract({
                    fallback: "style-loader",
                    use: ['css-loader','sass-loader'],
                    publicPath: '/css'
                })
            }, 
            <% } %>
            
            {
                test: /\.(png|jpg|gif)$/,
                loader: 'url-loader?limit=8192&name=images/[hash].[name].[ext]'
            },
            <% if (fileLoader) {%>
            {
                test: /\.(svg|ttf|eot|woff|woff2)$/,
                loader: 'file-loader?name=fonts/[hash].[name].[ext]'
            }
            <% } %>
        ]
    },

    devtool: 'source-map',

    resolve: {
        extensions: ['.js', '.json' <% if (extname!= 'js'){%> ,'.<%= extname %>'<%}%>]
    },

    plugins: [
        new CleanWebpackPlugin(['dist'], {
            root: path.resolve(__dirname, '../')
        }),

        new webpack.NamedModulesPlugin(),

        <% if (cache) {%>
        new webpack.optimize.CommonsChunkPlugin({
             name: 'manifest',
             minChunks: Infinity, // 随着 入口chunk 越来越多，这个配置保证没其它的模块会打包进 公共chunk
        }),
        <% } %>

        new webpack.optimize.UglifyJsPlugin({
            compress: {
                warnings: false,
                drop_console: false,
            }
        }),

        <% if (multiple) {%>
        new ExtractTextPlugin('css/[name].[contenthash].min.css'),
        <% } else { %>
        new ExtractTextPlugin('css/style.[contenthash].min.css'),
        <% } %>

        <% if (multiple) {%>
        new HtmlWebpackPlugin({
            filename: 'index.html',
            template: 'html-withimg-loader!'+path.resolve(__dirname, '../src/index.html'),
            chunks: <% if (cache) {%>['app', 'vendor', 'manifest']<%} else {%>['app']<%}%>
        }),

        new HtmlWebpackPlugin({
            filename: 'info.html',
            template: 'html-withimg-loader!'+path.resolve(__dirname, '../src/info.html'),
            chunks: <% if (cache) {%>['info', 'vendor', 'manifest']<%} else {%>['info']<%}%>
        }),
        <% }  else {%>
        new HtmlWebpackPlugin({
            filename: 'index.html',
            template: 'html-withimg-loader!'+path.resolve(__dirname, '../src/index.html'),
        }),
        <% } %>

        // 编译时(compile time)插件
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': '"production"',
        }),
    ]

}